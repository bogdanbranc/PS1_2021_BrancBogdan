#include <LiquidCrystal.h>
#define BUTTON_CANCEL 9
#define BUTTON_OK 8
#define BUTTON_PREV 7
#define BUTTON_NEXT 6
#define SENSOR_TEMP 0
#define SURSA_CALDURA 13

#define MANUAL 0
#define AUTOMATIC 1

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_KP,
  MENU_TEMP,
  MENU_INCALZIRE,
  MENU_MENTINERE,
  MENU_RACIRE,
  MENU_KI,
  MENU_KD,
  MENU_MAX_NUM
};

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);

double temp = 36.6; //T_set
double t_incalzire = 10.0;
double T_mentinere = 0;
double T_racire = 0;//Timp_racire
double temperatura_citita_senzor = 0;

double kp = 1, ki =0.1, kd = 0.1;
double eroare=0;
double suma_erori= 0;
double eroare_anterioara = 0;
double derivativa = 0;
double dt; // timp esantionare
double setpoint = 30;
float temp_q = 0;

Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_KP:
    	lcd.print("KP = ");
    	lcd.print(kp);
    	break;
    case MENU_TEMP:
    	lcd.print("TEMP = ");
    	lcd.print(temp);
    	break;
    case MENU_INCALZIRE:
    	lcd.print("INCALZIRE = ");
    	lcd.print(t_incalzire);
    break;
    case MENU_MENTINERE:
      lcd.print("MENTINERE = ");
      lcd.print(T_mentinere);
  	break;
    case MENU_RACIRE:
      lcd.print("RACIRE = ");
      lcd.print(T_racire);
  	break;
    case MENU_KI:
      lcd.print("KI = ");
      lcd.print(ki);
  	break;
    case MENU_KD:
      lcd.print("KD = ");
      lcd.print(kd);
  	break;
    case MENU_MAIN:
    default:
    	lcd.print("PS 2020 SEM 1");
    	lcd.setCursor(0,1);
 		int btn = digitalRead(BUTTON_OK);
   		break;
  }
  if(current_menu != MENU_MAIN)
  {
  	lcd.setCursor(0,1);
  	lcd.print("modifica");
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void save_kp(void)
{
}

void inc_kp(void)
{
  kp++;
}

void dec_kp(void)
{
  kp--;
}

void save_temp(void)
{
}

void inc_temp(void)
{
  temp++;
}

void dec_temp(void)
{
  temp--;
}


void inc_incalzire()
{
  t_incalzire++;
}

void dec_incalzire()
{
  t_incalzire--;
}

void inc_mentinere()
{
  T_mentinere++;
}

void dec_mentinere()
{
  T_mentinere--;
}

void inc_racire()
{
  T_racire++;
}

void dec_racire()
{
  T_racire--;
}

void inc_Ki()
{
  ki++;
}

void dec_Ki()
{
  ki--;
}

void inc_Kd()
{
  kd++;
}

void dec_Kd()
{
  kd--;
}

state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_home, go_home, inc_temp, dec_temp},   // MENU_TEMP
  {go_home, go_home, inc_incalzire, dec_incalzire},	//MENU_INCALZIRE
  {go_home, go_home, inc_mentinere, dec_mentinere},	//MENU_MENTINERE  
  {go_home, go_home, inc_racire, dec_racire},	//MENU_RACIRE
  {go_home, go_home, inc_Ki, dec_Ki},	//MENU_KI
  {go_home, go_home, inc_Kd, dec_Kd},	//MENU_KD
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    Serial.print("BUTTON_OK\n");
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    Serial.print("BUTTON_CANCEL\n");
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
    Serial.print("BUTTON_NEXT\n");
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
    Serial.print("BUTTON_PREV\n");
  }
  Serial.print(ret_val);
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);
  
  pinMode(6, INPUT);
  digitalWrite(6, LOW); // pull-down

  pinMode(7, INPUT);
  digitalWrite(7, LOW); // pull-down
  
  pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
  
  pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down
  
  pinMode(SURSA_CALDURA, OUTPUT); // Sursa de caldura
  digitalWrite(SURSA_CALDURA, LOW); //Sursa de caldura stinsa
}

void loop()
{
  int output;
  volatile Buttons event = GetButtons();
  if (event != EV_NONE)
  {
    state_machine(current_menu, event);
  }
  print_menu(scroll_menu);
  
  temperatura_citita_senzor = analogRead(SENSOR_TEMP);
  	// read analog volt from sensor and save to variable temp
  temperatura_citita_senzor = temperatura_citita_senzor/ 1024.0 * 5000;
  temperatura_citita_senzor = (temperatura_citita_senzor-500)/10;
	// convert the analog volt to its temperature equivalent
  Serial.print("TEMPERATURE = ");
  Serial.print(temperatura_citita_senzor); // display temperature value
  Serial.print("*C");
  Serial.println();
  if(temperatura_citita_senzor>50)
  digitalWrite(SURSA_CALDURA,HIGH );
  else
  digitalWrite(SURSA_CALDURA,LOW );
  //calculare output PID
  eroare = setpoint - temperatura_citita_senzor;
  suma_erori= suma_erori + eroare * dt;
  derivativa = (eroare - eroare_anterioara) / dt;
  output = (kp * eroare) + (ki * suma_erori ) + (kd * derivativa);
  eroare_anterioara = eroare;
  delay(1000);
 }
